// Code generated by zenrpc; DO NOT EDIT.

package rpc

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	NewsService struct{ Get, GetByID, Count string }
}{
	NewsService: struct{ Get, GetByID, Count string }{
		Get:     "get",
		GetByID: "getbyid",
		Count:   "count",
	},
}

func (NewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Get": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "filter",
						Optional: true,
						Type:     smd.Object,
						Properties: smd.PropertyList{
							{
								Name:     "categoryID",
								Optional: true,
								Type:     smd.Integer,
							},
							{
								Name:     "tagID",
								Optional: true,
								Type:     smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/News",
					},
					Definitions: map[string]smd.Definition{
						"News": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name: "content",
									Type: smd.String,
								},
								{
									Name: "tagIDs",
									Type: smd.Array,
									Items: map[string]string{
										"type": smd.Integer,
									},
								},
								{
									Name: "categoryID",
									Type: smd.Integer,
								},
								{
									Name: "createdAt",
									Type: smd.String,
								},
								{
									Name: "category",
									Ref:  "#/definitions/Category",
									Type: smd.Object,
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"GetByID": {
				Parameters: []smd.JSONSchema{
					{
						Name: "id",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					Properties: smd.PropertyList{
						{
							Name: "id",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name: "content",
							Type: smd.String,
						},
						{
							Name: "tagIDs",
							Type: smd.Array,
							Items: map[string]string{
								"type": smd.Integer,
							},
						},
						{
							Name: "categoryID",
							Type: smd.Integer,
						},
						{
							Name: "createdAt",
							Type: smd.String,
						},
						{
							Name: "category",
							Ref:  "#/definitions/Category",
							Type: smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"Count": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "filter",
						Optional: true,
						Type:     smd.Object,
						Properties: smd.PropertyList{
							{
								Name:     "categoryID",
								Optional: true,
								Type:     smd.Integer,
							},
							{
								Name:     "tagID",
								Optional: true,
								Type:     smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Integer,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s NewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.NewsService.Get:
		var args = struct {
			Filter *NewsSearch `json:"filter"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filter"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Get(ctx, args.Filter))

	case RPC.NewsService.GetByID:
		var args = struct {
			Id int64 `json:"id"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"id"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetByID(ctx, args.Id))

	case RPC.NewsService.Count:
		var args = struct {
			Filter *NewsSearch `json:"filter"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filter"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Count(ctx, args.Filter))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
